{"ast":null,"code":"import{useEffect,useRef,useState}from\"react\";import\"./App.css\";import{io}from\"socket.io-client\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const socket=useRef();// State for storing messages and current message\nconst[messages,setMessages]=useState([]);const[currentMessage,setCurrentMessage]=useState(\"\");// Function to send a message\nconst sendMessage=()=>{if(currentMessage){socket.current.emit(\"message\",currentMessage);setCurrentMessage(\"\");}};useEffect(()=>{socket.current=io(\"ws://localhost:9013\");socket.current.on(\"connnection\",()=>{console.log(\"connected to server\");});},[]);useEffect(()=>{// Listen for incoming messages\nsocket.current.on(\"message\",message=>{console.log(socket.current.id);setMessages(prevMessages=>[...prevMessages,message]);});},[]);return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"chat-wrapper\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"messages\",children:messages.map((message,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"chatbox \".concat(socket.current.id===message.user?\"current\":\"\"),children:[/*#__PURE__*/_jsx(\"div\",{className:\"username\",children:message.user}),/*#__PURE__*/_jsx(\"div\",{className:\"message\",children:message.message},index)]}))}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-wrapper\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Type a message...\",value:currentMessage.message,onChange:e=>setCurrentMessage(e.target.value),required:true,className:\"input-message\"}),/*#__PURE__*/_jsx(\"button\",{onClick:sendMessage,children:\"Send\"})]})]})});}export default App;","map":{"version":3,"sources":["/Users/abelananta/Coding/simple-react-socket-io/react-client/src/App.js"],"names":["useEffect","useRef","useState","io","App","socket","messages","setMessages","currentMessage","setCurrentMessage","sendMessage","current","emit","on","console","log","message","id","prevMessages","map","index","user","e","target","value"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,MAApB,CAA4BC,QAA5B,KAA4C,OAA5C,CACA,MAAO,WAAP,CAEA,OAASC,EAAT,KAAmB,kBAAnB,C,wFAEA,QAASC,CAAAA,GAAT,EAAe,CACb,KAAMC,CAAAA,MAAM,CAAGJ,MAAM,EAArB,CACA;AACA,KAAM,CAACK,QAAD,CAAWC,WAAX,EAA0BL,QAAQ,CAAC,EAAD,CAAxC,CACA,KAAM,CAACM,cAAD,CAAiBC,iBAAjB,EAAsCP,QAAQ,CAAC,EAAD,CAApD,CACA;AACA,KAAMQ,CAAAA,WAAW,CAAG,IAAM,CACxB,GAAIF,cAAJ,CAAoB,CAClBH,MAAM,CAACM,OAAP,CAAeC,IAAf,CAAoB,SAApB,CAA+BJ,cAA/B,EACAC,iBAAiB,CAAC,EAAD,CAAjB,CACD,CACF,CALD,CAOAT,SAAS,CAAC,IAAM,CACdK,MAAM,CAACM,OAAP,CAAiBR,EAAE,CAAC,qBAAD,CAAnB,CAEAE,MAAM,CAACM,OAAP,CAAeE,EAAf,CAAkB,aAAlB,CAAiC,IAAM,CACrCC,OAAO,CAACC,GAAR,CAAY,qBAAZ,EACD,CAFD,EAGD,CANQ,CAMN,EANM,CAAT,CAQAf,SAAS,CAAC,IAAM,CACd;AACAK,MAAM,CAACM,OAAP,CAAeE,EAAf,CAAkB,SAAlB,CAA8BG,OAAD,EAAa,CACxCF,OAAO,CAACC,GAAR,CAAYV,MAAM,CAACM,OAAP,CAAeM,EAA3B,EACAV,WAAW,CAAEW,YAAD,EAAkB,CAAC,GAAGA,YAAJ,CAAkBF,OAAlB,CAAnB,CAAX,CACD,CAHD,EAID,CANQ,CAMN,EANM,CAAT,CAQA,mBACE,YAAK,SAAS,CAAC,KAAf,uBACE,aAAK,SAAS,CAAC,cAAf,wBACE,YAAK,SAAS,CAAC,UAAf,UACGV,QAAQ,CAACa,GAAT,CAAa,CAACH,OAAD,CAAUI,KAAV,gBACZ,aACE,SAAS,mBACPf,MAAM,CAACM,OAAP,CAAeM,EAAf,GAAsBD,OAAO,CAACK,IAA9B,CAAqC,SAArC,CAAiD,EAD1C,CADX,wBAKE,YAAK,SAAS,CAAC,UAAf,UAA2BL,OAAO,CAACK,IAAnC,EALF,cAME,YAAiB,SAAS,CAAC,SAA3B,UACGL,OAAO,CAACA,OADX,EAAUI,KAAV,CANF,GADD,CADH,EADF,cAeE,aAAK,SAAS,CAAC,eAAf,wBACE,cACE,IAAI,CAAC,MADP,CAEE,WAAW,CAAC,mBAFd,CAGE,KAAK,CAAEZ,cAAc,CAACQ,OAHxB,CAIE,QAAQ,CAAGM,CAAD,EAAOb,iBAAiB,CAACa,CAAC,CAACC,MAAF,CAASC,KAAV,CAJpC,CAKE,QAAQ,KALV,CAME,SAAS,CAAC,eANZ,EADF,cASE,eAAQ,OAAO,CAAEd,WAAjB,kBATF,GAfF,GADF,EADF,CA+BD,CAED,cAAeN,CAAAA,GAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\n\nimport { io } from \"socket.io-client\";\n\nfunction App() {\n  const socket = useRef();\n  // State for storing messages and current message\n  const [messages, setMessages] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  // Function to send a message\n  const sendMessage = () => {\n    if (currentMessage) {\n      socket.current.emit(\"message\", currentMessage);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.current = io(\"ws://localhost:9013\");\n\n    socket.current.on(\"connnection\", () => {\n      console.log(\"connected to server\");\n    });\n  }, []);\n\n  useEffect(() => {\n    // Listen for incoming messages\n    socket.current.on(\"message\", (message) => {\n      console.log(socket.current.id);\n      setMessages((prevMessages) => [...prevMessages, message]);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"chat-wrapper\">\n        <div className=\"messages\">\n          {messages.map((message, index) => (\n            <div\n              className={`chatbox ${\n                socket.current.id === message.user ? \"current\" : \"\"\n              }`}\n            >\n              <div className=\"username\">{message.user}</div>\n              <div key={index} className=\"message\">\n                {message.message}\n              </div>\n            </div>\n          ))}\n        </div>\n        <div className=\"input-wrapper\">\n          <input\n            type=\"text\"\n            placeholder=\"Type a message...\"\n            value={currentMessage.message}\n            onChange={(e) => setCurrentMessage(e.target.value)}\n            required\n            className=\"input-message\"\n          />\n          <button onClick={sendMessage}>Send</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}