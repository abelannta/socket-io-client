{"ast":null,"code":"import{useEffect,useRef,useState}from\"react\";import\"./App.css\";import{io}from\"socket.io-client\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function App(){const socket=useRef();// State for storing messages and current message\nconst[messages,setMessages]=useState([]);const[currentMessage,setCurrentMessage]=useState({user:\"\",message:\"\"});// Function to send a message\nconst sendMessage=()=>{if(currentMessage){socket.current.emit(\"message\",currentMessage);setCurrentMessage({user:\"\",message:\"\"});}};useEffect(()=>{socket.current=io(\"ws://localhost:9013\");socket.current.on(\"connnection\",()=>{console.log(\"connected to server\");});},[]);useEffect(()=>{// Listen for incoming messages\nsocket.current.on(\"message\",message=>{setMessages(prevMessages=>[...prevMessages,message]);});},[]);return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"messages\",children:messages.map((message,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"message\",children:[message.message,\" from \",message.user]},index))}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"input your name\",value:currentMessage.user,onChange:e=>setCurrentMessage(prev=>({...prev,user:e.target.value})),required:true}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Type a message...\",value:currentMessage.message,onChange:e=>setCurrentMessage(prev=>({...prev,message:e.target.value})),required:true}),/*#__PURE__*/_jsx(\"button\",{onClick:sendMessage,children:\"Send\"})]})});}export default App;","map":{"version":3,"sources":["/Users/abelananta/Coding/simple-react-socket-io/react-client/src/App.js"],"names":["useEffect","useRef","useState","io","App","socket","messages","setMessages","currentMessage","setCurrentMessage","user","message","sendMessage","current","emit","on","console","log","prevMessages","map","index","e","prev","target","value"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,MAApB,CAA4BC,QAA5B,KAA4C,OAA5C,CACA,MAAO,WAAP,CAEA,OAASC,EAAT,KAAmB,kBAAnB,C,wFAEA,QAASC,CAAAA,GAAT,EAAe,CACb,KAAMC,CAAAA,MAAM,CAAGJ,MAAM,EAArB,CACA;AACA,KAAM,CAACK,QAAD,CAAWC,WAAX,EAA0BL,QAAQ,CAAC,EAAD,CAAxC,CACA,KAAM,CAACM,cAAD,CAAiBC,iBAAjB,EAAsCP,QAAQ,CAAC,CACnDQ,IAAI,CAAE,EAD6C,CAEnDC,OAAO,CAAE,EAF0C,CAAD,CAApD,CAIA;AACA,KAAMC,CAAAA,WAAW,CAAG,IAAM,CACxB,GAAIJ,cAAJ,CAAoB,CAClBH,MAAM,CAACQ,OAAP,CAAeC,IAAf,CAAoB,SAApB,CAA+BN,cAA/B,EACAC,iBAAiB,CAAC,CAChBC,IAAI,CAAE,EADU,CAEhBC,OAAO,CAAE,EAFO,CAAD,CAAjB,CAID,CACF,CARD,CAUAX,SAAS,CAAC,IAAM,CACdK,MAAM,CAACQ,OAAP,CAAiBV,EAAE,CAAC,qBAAD,CAAnB,CAEAE,MAAM,CAACQ,OAAP,CAAeE,EAAf,CAAkB,aAAlB,CAAiC,IAAM,CACrCC,OAAO,CAACC,GAAR,CAAY,qBAAZ,EACD,CAFD,EAGD,CANQ,CAMN,EANM,CAAT,CAQAjB,SAAS,CAAC,IAAM,CACd;AACAK,MAAM,CAACQ,OAAP,CAAeE,EAAf,CAAkB,SAAlB,CAA8BJ,OAAD,EAAa,CACxCJ,WAAW,CAAEW,YAAD,EAAkB,CAAC,GAAGA,YAAJ,CAAkBP,OAAlB,CAAnB,CAAX,CACD,CAFD,EAGD,CALQ,CAKN,EALM,CAAT,CAOA,mBACE,YAAK,SAAS,CAAC,KAAf,uBACE,aAAK,SAAS,CAAC,EAAf,wBACE,YAAK,SAAS,CAAC,UAAf,UACGL,QAAQ,CAACa,GAAT,CAAa,CAACR,OAAD,CAAUS,KAAV,gBACZ,aAAiB,SAAS,CAAC,SAA3B,WACGT,OAAO,CAACA,OADX,UAC0BA,OAAO,CAACD,IADlC,GAAUU,KAAV,CADD,CADH,EADF,cAQE,cACE,IAAI,CAAC,MADP,CAEE,WAAW,CAAC,iBAFd,CAGE,KAAK,CAAEZ,cAAc,CAACE,IAHxB,CAIE,QAAQ,CAAGW,CAAD,EACRZ,iBAAiB,CAAEa,IAAD,GAAW,CAAE,GAAGA,IAAL,CAAWZ,IAAI,CAAEW,CAAC,CAACE,MAAF,CAASC,KAA1B,CAAX,CAAD,CALrB,CAOE,QAAQ,KAPV,EARF,cAiBE,cACE,IAAI,CAAC,MADP,CAEE,WAAW,CAAC,mBAFd,CAGE,KAAK,CAAEhB,cAAc,CAACG,OAHxB,CAIE,QAAQ,CAAGU,CAAD,EACRZ,iBAAiB,CAAEa,IAAD,GAAW,CAAE,GAAGA,IAAL,CAAWX,OAAO,CAAEU,CAAC,CAACE,MAAF,CAASC,KAA7B,CAAX,CAAD,CALrB,CAOE,QAAQ,KAPV,EAjBF,cA0BE,eAAQ,OAAO,CAAEZ,WAAjB,kBA1BF,GADF,EADF,CAgCD,CAED,cAAeR,CAAAA,GAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport \"./App.css\";\n\nimport { io } from \"socket.io-client\";\n\nfunction App() {\n  const socket = useRef();\n  // State for storing messages and current message\n  const [messages, setMessages] = useState([]);\n  const [currentMessage, setCurrentMessage] = useState({\n    user: \"\",\n    message: \"\",\n  });\n  // Function to send a message\n  const sendMessage = () => {\n    if (currentMessage) {\n      socket.current.emit(\"message\", currentMessage);\n      setCurrentMessage({\n        user: \"\",\n        message: \"\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    socket.current = io(\"ws://localhost:9013\");\n\n    socket.current.on(\"connnection\", () => {\n      console.log(\"connected to server\");\n    });\n  }, []);\n\n  useEffect(() => {\n    // Listen for incoming messages\n    socket.current.on(\"message\", (message) => {\n      setMessages((prevMessages) => [...prevMessages, message]);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"\">\n        <div className=\"messages\">\n          {messages.map((message, index) => (\n            <div key={index} className=\"message\">\n              {message.message} from {message.user}\n            </div>\n          ))}\n        </div>\n        <input\n          type=\"text\"\n          placeholder=\"input your name\"\n          value={currentMessage.user}\n          onChange={(e) =>\n            setCurrentMessage((prev) => ({ ...prev, user: e.target.value }))\n          }\n          required\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Type a message...\"\n          value={currentMessage.message}\n          onChange={(e) =>\n            setCurrentMessage((prev) => ({ ...prev, message: e.target.value }))\n          }\n          required\n        />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}